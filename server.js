const fs = require('fs')
const path = require('path')
const LRU = require('lru-cache')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const microcache = require('route-cache')
const { minify } = require('html-minifier')
const { createBundleRenderer } = require('vue-server-renderer')
// const ssrWindow = require('ssr-window')
// import { window, document }

const resolve = file => path.resolve(__dirname, file)

// console.log(window)
if (typeof window === 'undefined') {
  global.window = require('ssr-window').window
  global.document = require('ssr-window').document
}
// console.log('window:', window)
// console.log('document:', document)
// console.log(global)
const config = require('./dist/config')
// console.log('window:', window)
// console.log('document:', document)

// Path mapping
const app = express()
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && 1000 * 60 * 60 * 24 * 30
})

app.use(compression({ threshold: 0 }))
app.use(favicon('./static/img/logo.ico'))
app.use('/dist', serve('./dist', true))
app.use('/static', serve('./static', true))
app.use('/manifest.json', serve('./manifest.json', true))
app.use('/service-worker.js', serve('./dist/service-worker.js'))

// Determine whether a request is cacheable
const useMicroCache = process.env.MICRO_CACHE !== 'false'
const isCacheable = req => {
  // console.log('request:', req)
  return req.url.split('/')[1] != 'user'
}
// 1-second microcache.
// https://www.nginx.com/blog/benefits-of-microcaching-nginx/
app.use(microcache.cacheSeconds(1, req => useMicroCache && isCacheable(req)))


// Request handling
const renderer = createBundleRenderer(
  // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  require('./dist/vue-ssr-server-bundle.json'), {
  // Create server renderer using template and built server bundle.
  // The server bundle is generated by vue-ssr-webpack-plugin.
  template: fs.readFileSync(resolve('./index.template.html'), 'utf-8'),
  // The client manifests are optional, but it allows the renderer
  // to automatically infer preload/prefetch links and directly add <script>
  // tags for any async chunks used during render, avoiding waterfall requests.
  clientManifest: require('./dist/vue-ssr-client-manifest.json'),
  // this is only needed when vue-server-renderer is npm-linked
  basedir: resolve('./dist'),
  // recommended for performance
  runInNewContext: false,
  // for component caching
  cache: new LRU({
    max: 1000,
    maxAge: 1000 * 60 * 15   // 15 minutes
  }),
})
const serverInfo = `express/${require('express/package.json').version} ` 
  + `vue-server-renderer/${require('vue-server-renderer/package.json').version}`

app.get('*', (req, res) => {
  res.setHeader('Content-Type', 'text/html')
  res.setHeader('Server', serverInfo)

  const handleError = err => {
    if (err.url) {
      res.redirect(err.url)
    } else if(err.code === 404) {
      res.status(404).send('404 | Page Not Found')
    } else {
      // Render Error Page or Redirect
      res.status(500).send('500 | Internal Server Error')
      console.error(`error during render : ${req.url}`)
      console.error(err.stack)
    }
  }

  const context = {
    title: 'Takken Lab',  // default title
    url: req.url
  }
  renderer.renderToString(context, (err, html) => {
    console.log(err)
    if (err) {
      return handleError(err)
    }
    res.send(minify(html, { collapseWhitespace: true, minifyCSS: true}))
  })
})

app.on('error', err => console.log(err))

const port = process.env.PORT || 8801
app.listen(port, () => {
  console.log(`server started at localhost: ${port}`)
})
